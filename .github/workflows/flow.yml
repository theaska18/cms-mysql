name: CICD
on:
  push:
    branches: [ "main" ]
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      APP_NAME: mysql
      PROJECT_DIR: /home/appsdocker/mysql
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        run: |
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Configurate CI / CD
        id: set_image_name
        run: |
          if [ "${GITHUB_REF##*/}" == "production" ]; then
            MODE="production"
            SERVER_PASSWORD="${{ secrets.PRODUCTION_SERVER_PASSWORD }}"
            SERVER_USER="${{ secrets.PRODUCTION_SERVER_USER }}"
            SERVER_HOST="${{ vars.PRODUCTION_SERVER_HOST }}"
            SERVER_PORT="${{ vars.PRODUCTION_SERVER_PORT }}"
            PORT="${{ vars.PRODUCTION_PORT }}"
          elif [ "${GITHUB_REF##*/}" == "uat" ]; then
            MODE="uat"
            SERVER_PASSWORD="${{ secrets.UAT_SERVER_PASSWORD }}"
            SERVER_USER="${{ secrets.UAT_SERVER_USER }}"
            SERVER_HOST="${{ vars.UAT_SERVER_HOST }}"
            SERVER_PORT="${{ vars.UAT_SERVER_PORT }}"
            PORT="${{ vars.UAT_PORT }}"
          else
            MODE="development"
            SERVER_PASSWORD="${{ secrets.DEVELOPMENT_SERVER_PASSWORD }}"
            SERVER_USER="${{ secrets.DEVELOPMENT_SERVER_USER }}"
            SERVER_HOST="${{ vars.DEVELOPMENT_SERVER_HOST }}"
            SERVER_PORT="${{ vars.DEVELOPMENT_SERVER_PORT }}"
            PORT="${{ vars.DEVELOPMENT_PORT }}"
          fi
          IMAGE_NAME="theaska18/$APP_NAME:$MODE"
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          echo "MODE=$MODE" >> $GITHUB_ENV
          echo "SERVER_PASSWORD=$SERVER_PASSWORD" >> $GITHUB_ENV
          echo "SERVER_USER=$SERVER_USER" >> $GITHUB_ENV
          echo "SERVER_HOST=$SERVER_HOST" >> $GITHUB_ENV
          echo "SERVER_PORT=$SERVER_PORT" >> $GITHUB_ENV
          echo "PORT=$PORT" >> $GITHUB_ENV
      - name: Build and Push Docker Image
        run: |
          echo "Using image name: $IMAGE_NAME"
          docker buildx build --platform linux/arm64 -t $IMAGE_NAME -f docker/Dockerfile --push .
          #docker push $IMAGE_NAME
      - name : Deploy Server Data
        run: |
            apt-get update && apt-get install -y sshpass
            sed -i -e "s~APP_NAME~$APP_NAME~" -e "s~MODE~$MODE~" -e "s~PORT~$PORT~" docker/docker-compose.yml
            sshpass -p "$SERVER_PASSWORD" ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_HOST -p $SERVER_PORT "mkdir -p $PROJECT_DIR-$MODE"
            sshpass -p "$SERVER_PASSWORD" scp  -P $SERVER_PORT -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no docker/docker-compose.yml $SERVER_USER@$SERVER_HOST:$PROJECT_DIR-$MODE/docker-compose.yml
            sshpass -p "$SERVER_PASSWORD" ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_HOST -p $SERVER_PORT "docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}; cd $PROJECT_DIR-$MODE; docker compose down; docker compose pull; docker compose up -d; yes | /usr/bin/docker image prune --all"
